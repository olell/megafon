// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetPostApiV1PostsInfoPostIdGetData, GetPostApiV1PostsInfoPostIdGetResponses, GetPostApiV1PostsInfoPostIdGetErrors, GetPostsApiV1PostsGetData, GetPostsApiV1PostsGetResponses, GetPostsApiV1PostsGetErrors, CreatePostApiV1PostsPostData, CreatePostApiV1PostsPostResponses, CreatePostApiV1PostsPostErrors, VoteApiV1PostsVotePostData, VoteApiV1PostsVotePostResponses, VoteApiV1PostsVotePostErrors, GetVotesApiV1PostsVotesGetData, GetVotesApiV1PostsVotesGetResponses, FlagApiV1PostsFlagPostData, FlagApiV1PostsFlagPostResponses, FlagApiV1PostsFlagPostErrors, InitSessionApiV1UserPostData, InitSessionApiV1UserPostResponses, InitSessionApiV1UserPostErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Post
 */
export const getPostApiV1PostsInfoPostIdGet = <ThrowOnError extends boolean = false>(options: Options<GetPostApiV1PostsInfoPostIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPostApiV1PostsInfoPostIdGetResponses, GetPostApiV1PostsInfoPostIdGetErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/posts/info/{post_id}',
        ...options
    });
};

/**
 * Get Posts
 */
export const getPostsApiV1PostsGet = <ThrowOnError extends boolean = false>(options: Options<GetPostsApiV1PostsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPostsApiV1PostsGetResponses, GetPostsApiV1PostsGetErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/posts/',
        ...options
    });
};

/**
 * Create Post
 */
export const createPostApiV1PostsPost = <ThrowOnError extends boolean = false>(options: Options<CreatePostApiV1PostsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePostApiV1PostsPostResponses, CreatePostApiV1PostsPostErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/posts/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Vote
 */
export const voteApiV1PostsVotePost = <ThrowOnError extends boolean = false>(options: Options<VoteApiV1PostsVotePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VoteApiV1PostsVotePostResponses, VoteApiV1PostsVotePostErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/posts/vote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Votes
 */
export const getVotesApiV1PostsVotesGet = <ThrowOnError extends boolean = false>(options?: Options<GetVotesApiV1PostsVotesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVotesApiV1PostsVotesGetResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/posts/votes',
        ...options
    });
};

/**
 * Flag
 */
export const flagApiV1PostsFlagPost = <ThrowOnError extends boolean = false>(options: Options<FlagApiV1PostsFlagPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FlagApiV1PostsFlagPostResponses, FlagApiV1PostsFlagPostErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/posts/flag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Init Session
 */
export const initSessionApiV1UserPost = <ThrowOnError extends boolean = false>(options: Options<InitSessionApiV1UserPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InitSessionApiV1UserPostResponses, InitSessionApiV1UserPostErrors, ThrowOnError>({
        url: '/api/v1/user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};